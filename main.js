(()=>{"use strict";const s="ajstoolkit-homework-8-1.onrender.com",e=document.querySelector("#hw"),t=new class{constructor(){this.container=null,this.onLoginListeners=[],this.getMessageListeners=[]}bindToDOM(s){if(!(s instanceof HTMLElement))throw new Error("container is not HTMLElement");this.container=s}checkBinding(){if(null===this.container)throw new Error("ListEditPlay not bind to DOM")}drawUI(){this.checkBinding(),this.container.innerHTML='\n        <header class="header">\n          <p>Домашнее задание к занятию "8. EventSource, Websockets"</p>\n          <p>Чат</p>\n        </header>\n        <div class="container">\n          <div class="chat"></div>\n          <div class="users"></div>\n          <div class="chat-control">\n            <input class="chat-message"/>\n            <button class="chat-send">Отправить</button>\n          </div>\n        </div>\n        <div class="popup">\n          <div class="loading">Backend Loading...</div>\n          <form class="popup-container close">\n            <div class="popup-header">Выберите псевдоним</div>\n            <input name="name" type="text" class="popup-login"/>\n            <button class="popup-button">Продолжить</button>\n          </form>\n        </div>\n      ',this.chat=this.container.querySelector(".chat"),this.users=this.container.querySelector(".users"),this.chatMessage=this.container.querySelector(".chat-message"),this.chatSend=this.container.querySelector(".chat-send"),this.popUp=this.container.querySelector(".popup"),this.popUpSubmit=this.container.querySelector(".popup-container"),this.loading=this.container.querySelector(".loading"),this.popUpLogin=this.container.querySelector(".popup-login"),this.popUpSubmit.addEventListener("submit",(s=>this.onLogin(s))),this.chatSend.addEventListener("click",(s=>this.onSendMessage(s))),this.popUpLogin.addEventListener("focus",(()=>this.onFocusClear("popUpLogin")))}addOnLoginListeners(s){this.onLoginListeners.push(s)}onLogin(s){s.preventDefault();const e=this.popUpLogin.value;this.popUpLogin.value="",this.onLoginListeners.forEach((s=>s.call(null,e)))}addGetMessageListeners(s){this.getMessageListeners.push(s)}onSendMessage(s){s.preventDefault();const e=String(this.chatMessage.value);e&&(this.chatMessage.value="",this.getMessageListeners.forEach((s=>s.call(null,e))))}loadMessage(s){const{name:e,text:t,date:n,classEl:i}=s,o=document.createElement("div");o.classList.add("message-container"),o.classList.add(i),o.innerHTML=`\n        <div class="message">\n          <div class="message-author">${e}, ${n}</div>\n          <div class="message-text">${t}</div>\n        </div>\n      `,this.chat.appendChild(o),this.chat.scrollTo(0,9999)}popupClose(){this.popUp.classList.add("close")}message(s,e){this[s].placeholder=e}onFocusClear(s){this.message(s,""),this[s].classList.remove("error-add")}errorInputAdd(s,e){this[s].value="",this.message(s,e),this[s].classList.add("error-add")}loadUser(s,e){this.users.innerHTML="";for(let t=0;t<s.length;t+=1){const n=document.createElement("div");n.classList.add("user"),s[t]===e&&(n.textContent="You"),s[t]!==e&&(n.textContent=s[t]),this.users.appendChild(n)}}backendLoaded(){this.loading.classList.add("close"),this.popUpSubmit.classList.remove("close")}};t.bindToDOM(e);const n=new class{constructor(s){this.ws="",this.url=`wss://${s}`,this.messageListeners=[]}init(s){this.ws=new WebSocket(`${this.url}/ws?login=${s}`),this.ws.addEventListener("open",(s=>{console.log(s),console.log("ws open")})),this.ws.addEventListener("close",(s=>{console.log(s),console.log("ws close")})),this.ws.addEventListener("error",(s=>{console.log(s),console.log("ws error")})),this.ws.addEventListener("message",(s=>this.onLoadMessage(s)))}addMessageListeners(s){this.messageListeners.push(s)}onLoadMessage(s){const e=JSON.parse(s.data),{chat:t}=e;t.forEach((s=>{this.messageListeners.forEach((e=>e.call(null,s)))}))}}(s),i=new class{constructor(s){this.baseURL=`https://${s}`}static options(s,e,t){return{method:s,body:JSON.stringify(t),urlParam:e}}async createRequest(s){const{method:e,urlParam:t,body:n}=s,i=`${this.baseURL}/${t}`,o=await fetch(i,{method:e,headers:{"Content-Type":"application/json;charset=utf-8"},body:n}),a=await o.json();return a||!1}async logining(s){const e=this.constructor.options("POST","?method=logining",s);return await this.createRequest(e)}async checkServer(){const s=this.constructor.options("GET","");return await this.createRequest(s)}}(s),o=new class{constructor(s,e,t){this.chatDOM=s,this.chatWS=e,this.chatAPI=t,this.login=""}init(){this.chatDOM.drawUI(),this.chatDOM.addOnLoginListeners(this.onLogin.bind(this)),this.chatDOM.addGetMessageListeners(this.onSendMessage.bind(this)),this.chatWS.addMessageListeners(this.onLoadMessage.bind(this)),this.backendLoading()}async onLogin(s){if(0===s.length)return void this.chatDOM.errorInputAdd("popUpLogin","Введите имя");if(s.length<3)return void this.chatDOM.errorInputAdd("popUpLogin","Короткое имя");const e=await this.chatAPI.logining({login:s});e&&!0===e.status&&(this.chatWS.init(s),this.chatDOM.popupClose(),this.login=s),e&&!1===e.status&&(console.log(e),this.chatDOM.errorInputAdd("popUpLogin","Это имя уже есть в чате"))}onSendMessage(s){const e=JSON.stringify({message:s,type:"message"});this.chatWS.ws.send(e)}onLoadMessage(s){const e=s;return"message"===s.type?s.name===this.login?(e.classEl="message-right",e.name="You",this.chatDOM.loadMessage(e),!0):s.name===this.login||(e.classEl="message-left",this.chatDOM.loadMessage(e),!0):"user"===s.type&&(this.chatDOM.loadUser(s.names,this.login),!0)}async backendLoading(){const s=await this.chatAPI.checkServer();s&&!0===s.status&&this.chatDOM.backendLoaded()}}(t,n,i);o.init(),console.log("app started")})();